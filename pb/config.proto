syntax = "proto3";

package pb;

option go_package = "github.com/tiennv147/http-echo/pb;pb";

import "validate/validate.proto";

message Config {
  Listener listener = 1;
  Logger logger = 2;
  // The list of routes that will be matched, in order, for incoming requests.
  // The first route that matches will be used.
  repeated Route routes = 3;
}

// For my need first
message Route {
  // Route matching parameters.
  RouteMatch match = 1 [(validate.rules).message = {required: true}];
  map<string, string> response_headers = 2;
  string response_body = 3;
}

message RouteMatch {
    oneof path_specifier {
        option (validate.required) = true;
    
        // If specified, the route is a prefix rule meaning that the prefix must
        // match the beginning of the *:path* header.
        string prefix = 1;
    
        // If specified, the route is an exact path rule meaning that the path must
        // exactly match the *:path* header once the query string is removed.
        string path = 2;
    }
    // Specifies a set of headers that the route should match on. The router will
    // check the requestâ€™s headers against all the specified headers in the route
    // config. A match will happen if all the headers in the route are present in
    // the request with the same values (or based on presence if the value field
    // is not in the config).
    repeated HeaderMatcher headers = 6;
}

message HeaderMatcher {
    reserved 2, 3;
  
    // Specifies the name of the header in the request.
    string name = 1
        [(validate.rules).string = {min_bytes: 1 well_known_regex: HTTP_HEADER_NAME strict: false}];
  
    // Specifies how the header match will be performed to route the request.
    oneof header_match_specifier {
      // If specified, header match will be performed based on the value of the header.
      string exact_match = 4;
    }
}



message Logger {
    enum Level {
        UNSPECIFIED = 0;
        DEBUG = 1;
        INFO = 2;
        WARN = 3;
        ERROR = 4;
        PANIC = 5;
        FATAL = 6;
    }
    Level level = 1;
    oneof format {
        bool pretty = 2;
    }
}

message TCPSocket {
    string address = 1 [ (validate.rules).string = {min_bytes : 1} ];
    uint32 port = 2 [ (validate.rules).uint32 = {lte : 65535} ];
    bool secure = 3;
}

message UnixSocket {
    string path = 1 [ (validate.rules).string = {min_bytes : 1} ];
}

message Listener {
    oneof socket {
      option (validate.required) = true;
  
      TCPSocket tcp = 1;
      UnixSocket unix = 2;
    }
  }
  
